// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System.Collections.Generic;
using ValueTypeTests.VogenIds;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertInvoiceOperation1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpsertInvoiceOperation1724721064 : Marten.Internal.Operations.StorageOperation<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly ValueTypeTests.VogenIds.Invoice _document;
        private readonly ValueTypeTests.VogenIds.InvoiceId _id;
        private readonly System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertInvoiceOperation1724721064(ValueTypeTests.VogenIds.Invoice document, ValueTypeTests.VogenIds.InvoiceId id, System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select strong_typed5.mt_upsert_invoice(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id.Value.Value);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertInvoiceOperation1724721064
    
    
    // START: InsertInvoiceOperation1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InsertInvoiceOperation1724721064 : Marten.Internal.Operations.StorageOperation<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly ValueTypeTests.VogenIds.Invoice _document;
        private readonly ValueTypeTests.VogenIds.InvoiceId _id;
        private readonly System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertInvoiceOperation1724721064(ValueTypeTests.VogenIds.Invoice document, ValueTypeTests.VogenIds.InvoiceId id, System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select strong_typed5.mt_insert_invoice(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id.Value.Value);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertInvoiceOperation1724721064
    
    
    // START: UpdateInvoiceOperation1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpdateInvoiceOperation1724721064 : Marten.Internal.Operations.StorageOperation<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly ValueTypeTests.VogenIds.Invoice _document;
        private readonly ValueTypeTests.VogenIds.InvoiceId _id;
        private readonly System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateInvoiceOperation1724721064(ValueTypeTests.VogenIds.Invoice document, ValueTypeTests.VogenIds.InvoiceId id, System.Collections.Generic.Dictionary<ValueTypeTests.VogenIds.InvoiceId, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select strong_typed5.mt_update_invoice(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id.Value.Value);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateInvoiceOperation1724721064
    
    
    // START: QueryOnlyInvoiceSelector1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyInvoiceSelector1724721064 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<ValueTypeTests.VogenIds.Invoice>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyInvoiceSelector1724721064(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ValueTypeTests.VogenIds.Invoice Resolve(System.Data.Common.DbDataReader reader)
        {

            ValueTypeTests.VogenIds.Invoice document;
            document = _serializer.FromJson<ValueTypeTests.VogenIds.Invoice>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<ValueTypeTests.VogenIds.Invoice> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            ValueTypeTests.VogenIds.Invoice document;
            document = await _serializer.FromJsonAsync<ValueTypeTests.VogenIds.Invoice>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyInvoiceSelector1724721064
    
    
    // START: LightweightInvoiceSelector1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightInvoiceSelector1724721064 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>, Marten.Linq.Selectors.ISelector<ValueTypeTests.VogenIds.Invoice>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightInvoiceSelector1724721064(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ValueTypeTests.VogenIds.Invoice Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(reader.GetFieldValue<System.Guid>(0));

            ValueTypeTests.VogenIds.Invoice document;
            document = _serializer.FromJson<ValueTypeTests.VogenIds.Invoice>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ValueTypeTests.VogenIds.Invoice> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(await reader.GetFieldValueAsync<System.Guid>(0, token));

            ValueTypeTests.VogenIds.Invoice document;
            document = await _serializer.FromJsonAsync<ValueTypeTests.VogenIds.Invoice>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightInvoiceSelector1724721064
    
    
    // START: IdentityMapInvoiceSelector1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapInvoiceSelector1724721064 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>, Marten.Linq.Selectors.ISelector<ValueTypeTests.VogenIds.Invoice>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapInvoiceSelector1724721064(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ValueTypeTests.VogenIds.Invoice Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(reader.GetFieldValue<System.Guid>(0));
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ValueTypeTests.VogenIds.Invoice document;
            document = _serializer.FromJson<ValueTypeTests.VogenIds.Invoice>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<ValueTypeTests.VogenIds.Invoice> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(await reader.GetFieldValueAsync<System.Guid>(0, token));
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ValueTypeTests.VogenIds.Invoice document;
            document = await _serializer.FromJsonAsync<ValueTypeTests.VogenIds.Invoice>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapInvoiceSelector1724721064
    
    
    // START: DirtyTrackingInvoiceSelector1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingInvoiceSelector1724721064 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>, Marten.Linq.Selectors.ISelector<ValueTypeTests.VogenIds.Invoice>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingInvoiceSelector1724721064(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ValueTypeTests.VogenIds.Invoice Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(reader.GetFieldValue<System.Guid>(0));
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ValueTypeTests.VogenIds.Invoice document;
            document = _serializer.FromJson<ValueTypeTests.VogenIds.Invoice>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ValueTypeTests.VogenIds.Invoice> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = ValueTypeTests.VogenIds.InvoiceId.From(await reader.GetFieldValueAsync<System.Guid>(0, token));
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ValueTypeTests.VogenIds.Invoice document;
            document = await _serializer.FromJsonAsync<ValueTypeTests.VogenIds.Invoice>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingInvoiceSelector1724721064
    
    
    // START: QueryOnlyInvoiceDocumentStorage1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyInvoiceDocumentStorage1724721064 : Marten.Internal.Storage.QueryOnlyDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyInvoiceDocumentStorage1724721064(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override ValueTypeTests.VogenIds.InvoiceId AssignIdentity(ValueTypeTests.VogenIds.Invoice document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == null) _setter(document, ValueTypeTests.VogenIds.InvoiceId.From(JasperFx.Core.CombGuidIdGeneration.NewGuid()));
            return document.Id.Value;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override ValueTypeTests.VogenIds.InvoiceId Identity(ValueTypeTests.VogenIds.Invoice document)
        {
            return document.Id.Value;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyInvoiceSelector1724721064(session, _document);
        }


        public override object RawIdentityValue(ValueTypeTests.VogenIds.InvoiceId id)
        {
            return id.Value;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(ValueTypeTests.VogenIds.InvoiceId[] ids)
        {
            return new(){Value = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(ids, x => x.Value)), NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Uuid};
        }

    }

    // END: QueryOnlyInvoiceDocumentStorage1724721064
    
    
    // START: LightweightInvoiceDocumentStorage1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightInvoiceDocumentStorage1724721064 : Marten.Internal.Storage.LightweightDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightInvoiceDocumentStorage1724721064(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override ValueTypeTests.VogenIds.InvoiceId AssignIdentity(ValueTypeTests.VogenIds.Invoice document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == null) _setter(document, ValueTypeTests.VogenIds.InvoiceId.From(JasperFx.Core.CombGuidIdGeneration.NewGuid()));
            return document.Id.Value;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override ValueTypeTests.VogenIds.InvoiceId Identity(ValueTypeTests.VogenIds.Invoice document)
        {
            return document.Id.Value;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightInvoiceSelector1724721064(session, _document);
        }


        public override object RawIdentityValue(ValueTypeTests.VogenIds.InvoiceId id)
        {
            return id.Value;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(ValueTypeTests.VogenIds.InvoiceId[] ids)
        {
            return new(){Value = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(ids, x => x.Value)), NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Uuid};
        }

    }

    // END: LightweightInvoiceDocumentStorage1724721064
    
    
    // START: IdentityMapInvoiceDocumentStorage1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapInvoiceDocumentStorage1724721064 : Marten.Internal.Storage.IdentityMapDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapInvoiceDocumentStorage1724721064(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override ValueTypeTests.VogenIds.InvoiceId AssignIdentity(ValueTypeTests.VogenIds.Invoice document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == null) _setter(document, ValueTypeTests.VogenIds.InvoiceId.From(JasperFx.Core.CombGuidIdGeneration.NewGuid()));
            return document.Id.Value;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override ValueTypeTests.VogenIds.InvoiceId Identity(ValueTypeTests.VogenIds.Invoice document)
        {
            return document.Id.Value;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapInvoiceSelector1724721064(session, _document);
        }


        public override object RawIdentityValue(ValueTypeTests.VogenIds.InvoiceId id)
        {
            return id.Value;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(ValueTypeTests.VogenIds.InvoiceId[] ids)
        {
            return new(){Value = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(ids, x => x.Value)), NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Uuid};
        }

    }

    // END: IdentityMapInvoiceDocumentStorage1724721064
    
    
    // START: DirtyTrackingInvoiceDocumentStorage1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingInvoiceDocumentStorage1724721064 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingInvoiceDocumentStorage1724721064(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override ValueTypeTests.VogenIds.InvoiceId AssignIdentity(ValueTypeTests.VogenIds.Invoice document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == null) _setter(document, ValueTypeTests.VogenIds.InvoiceId.From(JasperFx.Core.CombGuidIdGeneration.NewGuid()));
            return document.Id.Value;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertInvoiceOperation1724721064
            (
                document, Identity(document),
                session.Versions.ForType<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ValueTypeTests.VogenIds.Invoice document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override ValueTypeTests.VogenIds.InvoiceId Identity(ValueTypeTests.VogenIds.Invoice document)
        {
            return document.Id.Value;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingInvoiceSelector1724721064(session, _document);
        }


        public override object RawIdentityValue(ValueTypeTests.VogenIds.InvoiceId id)
        {
            return id.Value;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(ValueTypeTests.VogenIds.InvoiceId[] ids)
        {
            return new(){Value = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(ids, x => x.Value)), NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Uuid};
        }

    }

    // END: DirtyTrackingInvoiceDocumentStorage1724721064
    
    
    // START: InvoiceBulkLoader1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InvoiceBulkLoader1724721064 : Marten.Internal.CodeGeneration.BulkLoader<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId> _storage;

        public InvoiceBulkLoader1724721064(Marten.Internal.Storage.IDocumentStorage<ValueTypeTests.VogenIds.Invoice, ValueTypeTests.VogenIds.InvoiceId> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY strong_typed5.mt_doc_invoice(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_invoice_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into strong_typed5.mt_doc_invoice (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_invoice_temp.\"id\", mt_doc_invoice_temp.\"data\", mt_doc_invoice_temp.\"mt_version\", mt_doc_invoice_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_invoice_temp left join strong_typed5.mt_doc_invoice on mt_doc_invoice_temp.id = strong_typed5.mt_doc_invoice.id where strong_typed5.mt_doc_invoice.id is null)";

        public const string OVERWRITE_SQL = "update strong_typed5.mt_doc_invoice target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_invoice_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_invoice_temp (like strong_typed5.mt_doc_invoice including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, ValueTypeTests.VogenIds.Invoice document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id.Value.Value, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(JasperFx.Core.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: InvoiceBulkLoader1724721064
    
    
    // START: InvoiceProvider1724721064
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InvoiceProvider1724721064 : Marten.Internal.Storage.DocumentProvider<ValueTypeTests.VogenIds.Invoice>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InvoiceProvider1724721064(Marten.Schema.DocumentMapping mapping) : base(new InvoiceBulkLoader1724721064(new QueryOnlyInvoiceDocumentStorage1724721064(mapping)), new QueryOnlyInvoiceDocumentStorage1724721064(mapping), new LightweightInvoiceDocumentStorage1724721064(mapping), new IdentityMapInvoiceDocumentStorage1724721064(mapping), new DirtyTrackingInvoiceDocumentStorage1724721064(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: InvoiceProvider1724721064
    
    
}

