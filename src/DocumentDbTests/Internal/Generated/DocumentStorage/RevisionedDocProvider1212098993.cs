// <auto-generated/>
#pragma warning disable
using DocumentDbTests.Concurrency;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertRevisionedDocOperation1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpsertRevisionedDocOperation1212098993 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly DocumentDbTests.Concurrency.RevisionedDoc _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertRevisionedDocOperation1212098993(DocumentDbTests.Concurrency.RevisionedDoc document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
                _document.Version = Revision;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
                _document.Version = Revision;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session)
        {
            if (document.Version > 0 && Revision == 1) Revision = document.Version;
            builder.Append("select numeric_revisioning.mt_upsert_revisioneddoc(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertRevisionedDocOperation1212098993
    
    
    // START: InsertRevisionedDocOperation1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InsertRevisionedDocOperation1212098993 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly DocumentDbTests.Concurrency.RevisionedDoc _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertRevisionedDocOperation1212098993(DocumentDbTests.Concurrency.RevisionedDoc document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            _document.Version = Revision;
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            _document.Version = Revision;
            return System.Threading.Tasks.Task.CompletedTask;
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session)
        {
            if (document.Version > 0 && Revision == 1) Revision = document.Version;
            builder.Append("select numeric_revisioning.mt_insert_revisioneddoc(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertRevisionedDocOperation1212098993
    
    
    // START: UpdateRevisionedDocOperation1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpdateRevisionedDocOperation1212098993 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly DocumentDbTests.Concurrency.RevisionedDoc _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateRevisionedDocOperation1212098993(DocumentDbTests.Concurrency.RevisionedDoc document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
                _document.Version = Revision;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
                _document.Version = Revision;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session)
        {
            if (document.Version > 0 && Revision == 1) Revision = document.Version;
            builder.Append("select numeric_revisioning.mt_update_revisioneddoc(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateRevisionedDocOperation1212098993
    
    
    // START: QueryOnlyRevisionedDocSelector1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyRevisionedDocSelector1212098993 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<DocumentDbTests.Concurrency.RevisionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyRevisionedDocSelector1212098993(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Concurrency.RevisionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 0);
            var version = reader.GetFieldValue<int>(1);
            document.Version = version;
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Concurrency.RevisionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 0, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(1, token);
            document.Version = version;
            return document;
        }

    }

    // END: QueryOnlyRevisionedDocSelector1212098993
    
    
    // START: LightweightRevisionedDocSelector1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightRevisionedDocSelector1212098993 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<DocumentDbTests.Concurrency.RevisionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightRevisionedDocSelector1212098993(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Concurrency.RevisionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Concurrency.RevisionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightRevisionedDocSelector1212098993
    
    
    // START: IdentityMapRevisionedDocSelector1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapRevisionedDocSelector1212098993 : Marten.Internal.CodeGeneration.RevisionedDocumentSelectorWithIdentityMap<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>, Marten.Linq.Selectors.ISelector<DocumentDbTests.Concurrency.RevisionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapRevisionedDocSelector1212098993(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Concurrency.RevisionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Concurrency.RevisionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapRevisionedDocSelector1212098993
    
    
    // START: DirtyTrackingRevisionedDocSelector1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingRevisionedDocSelector1212098993 : Marten.Internal.CodeGeneration.RevisionedDocumentSelectorWithDirtyChecking<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>, Marten.Linq.Selectors.ISelector<DocumentDbTests.Concurrency.RevisionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingRevisionedDocSelector1212098993(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Concurrency.RevisionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Concurrency.RevisionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Concurrency.RevisionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Concurrency.RevisionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingRevisionedDocSelector1212098993
    
    
    // START: OverwriteRevisionedDocOperation1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class OverwriteRevisionedDocOperation1212098993 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly DocumentDbTests.Concurrency.RevisionedDoc _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteRevisionedDocOperation1212098993(DocumentDbTests.Concurrency.RevisionedDoc document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
                _document.Version = Revision;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
                _document.Version = Revision;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session)
        {
            if (document.Version > 0 && Revision == 1) Revision = document.Version;
            builder.Append("select numeric_revisioning.mt_overwrite_revisioneddoc(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setCurrentRevisionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: OverwriteRevisionedDocOperation1212098993
    
    
    // START: QueryOnlyRevisionedDocDocumentStorage1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyRevisionedDocDocumentStorage1212098993 : Marten.Internal.Storage.QueryOnlyDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyRevisionedDocDocumentStorage1212098993(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(DocumentDbTests.Concurrency.RevisionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(DocumentDbTests.Concurrency.RevisionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyRevisionedDocSelector1212098993(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyRevisionedDocDocumentStorage1212098993
    
    
    // START: LightweightRevisionedDocDocumentStorage1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightRevisionedDocDocumentStorage1212098993 : Marten.Internal.Storage.LightweightDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightRevisionedDocDocumentStorage1212098993(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(DocumentDbTests.Concurrency.RevisionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(DocumentDbTests.Concurrency.RevisionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightRevisionedDocSelector1212098993(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightRevisionedDocDocumentStorage1212098993
    
    
    // START: IdentityMapRevisionedDocDocumentStorage1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapRevisionedDocDocumentStorage1212098993 : Marten.Internal.Storage.IdentityMapDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapRevisionedDocDocumentStorage1212098993(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(DocumentDbTests.Concurrency.RevisionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(DocumentDbTests.Concurrency.RevisionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapRevisionedDocSelector1212098993(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapRevisionedDocDocumentStorage1212098993
    
    
    // START: DirtyTrackingRevisionedDocDocumentStorage1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingRevisionedDocDocumentStorage1212098993 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingRevisionedDocDocumentStorage1212098993(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(DocumentDbTests.Concurrency.RevisionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertRevisionedDocOperation1212098993
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteRevisionedDocOperation1212098993
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(DocumentDbTests.Concurrency.RevisionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingRevisionedDocSelector1212098993(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingRevisionedDocDocumentStorage1212098993
    
    
    // START: RevisionedDocBulkLoader1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class RevisionedDocBulkLoader1212098993 : Marten.Internal.CodeGeneration.BulkLoader<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid> _storage;

        public RevisionedDocBulkLoader1212098993(Marten.Internal.Storage.IDocumentStorage<DocumentDbTests.Concurrency.RevisionedDoc, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY numeric_revisioning.mt_doc_revisioneddoc(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_revisioneddoc_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into numeric_revisioning.mt_doc_revisioneddoc (\"id\", \"data\", \"mt_dotnet_type\", \"mt_version\", mt_last_modified) (select mt_doc_revisioneddoc_temp.\"id\", mt_doc_revisioneddoc_temp.\"data\", mt_doc_revisioneddoc_temp.\"mt_dotnet_type\", mt_doc_revisioneddoc_temp.\"mt_version\", transaction_timestamp() from mt_doc_revisioneddoc_temp left join numeric_revisioning.mt_doc_revisioneddoc on mt_doc_revisioneddoc_temp.id = numeric_revisioning.mt_doc_revisioneddoc.id where numeric_revisioning.mt_doc_revisioneddoc.id is null)";

        public const string OVERWRITE_SQL = "update numeric_revisioning.mt_doc_revisioneddoc target SET data = source.data, mt_dotnet_type = source.mt_dotnet_type, mt_version = source.mt_version, mt_last_modified = transaction_timestamp() FROM mt_doc_revisioneddoc_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_revisioneddoc_temp (like numeric_revisioning.mt_doc_revisioneddoc including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, DocumentDbTests.Concurrency.RevisionedDoc document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(1, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: RevisionedDocBulkLoader1212098993
    
    
    // START: RevisionedDocProvider1212098993
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class RevisionedDocProvider1212098993 : Marten.Internal.Storage.DocumentProvider<DocumentDbTests.Concurrency.RevisionedDoc>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public RevisionedDocProvider1212098993(Marten.Schema.DocumentMapping mapping) : base(new RevisionedDocBulkLoader1212098993(new QueryOnlyRevisionedDocDocumentStorage1212098993(mapping)), new QueryOnlyRevisionedDocDocumentStorage1212098993(mapping), new LightweightRevisionedDocDocumentStorage1212098993(mapping), new IdentityMapRevisionedDocDocumentStorage1212098993(mapping), new DirtyTrackingRevisionedDocDocumentStorage1212098993(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: RevisionedDocProvider1212098993
    
    
}

